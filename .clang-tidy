# This file is part of the Stomper project.
#
# Licensed under the BSD 3-Clause License (the "License"); a copy of the License
# is included with this project. You may also obtain a copy of the License at:
#
#     https://opensource.org/licenses/BSD-3-Clause
#
# Additional licenses for third-party dependencies are also included
# and must be reviewed separately.

---

UseColor: true
WarningsAsErrors: '*'

Checks:
  -*, -abseil-*, -altera-*, -android-*, -boost, -cert-*, -concurrency-*, -google-*, -hicpp-*, -objc-*, -openmp-*, 
  -zircon-*, 
  bugprone-argument-comment, bugprone-assignment-in-if-condition, bugprone-infinite-loop,
  bugprone-bool-pointer-implicit-conversion, bugprone-branch-clone, bugprone-casting-through-void, 
  bugprone-chained-comparison, bugprone-compare-pointer-to-member-virtual-function, bugprone-copy-constructor-init, 
  bugprone-crtp-constructor-accessibility, bugprone-dangling-handle, bugprone-dynamic-static-initializers, 
  bugprone-empty-catch, bugprone-exception-escape, bugprone-forward-declaration-namespace, bugprone-incorrect-roundings,
  bugprone-forwarding-reference-overload, bugprone-inaccurate-erase, bugprone-inc-dec-in-conditions, 
  bugprone-integer-division, bugprone-macro-parentheses, bugprone-lambda-function-name, bugprone-misplaced-widening-cast,
  bugprone-macro-repeated-side-effects, bugprone-misplaced-operator-in-strlen-in-alloc, bugprone-multiple-statement-macro,
  bugprone-misplaced-pointer-arithmetic-in-alloc, bugprone-move-forwarding-reference, bugprone-narrowing-conversions,
  bugprone-multi-level-implicit-pointer-conversion, bugprone-multiple-new-in-one-expression, bugprone-no-escape, 
  bugprone-non-zero-enum-to-bool-conversion, bugprone-nondeterministic-pointer-iteration-order, bugprone-sizeof-container,
  bugprone-not-null-terminated-result, bugprone-optional-value-conversion, bugprone-parent-virtual-call, 
  bugprone-pointer-arithmetic-on-polymorphic-object, bugprone-redundant-branch-condition, bugprone-reserved-identifier,
  bugprone-return-const-ref-from-parameter, bugprone-shared-ptr-array-mismatch, bugprone-signal-handler, 
  bugprone-signed-char-misuse, bugprone-sizeof-expression, bugprone-spuriously-wake-up-functions, bugprone-suspicious-*,
  bugprone-standalone-empty, bugprone-string-constructor, bugprone-string-integer-assignment, bugprone-suspicious-include,
  bugprone-string-literal-with-embedded-nul, bugprone-stringview-nullptr, bugprone-swapped-arguments, bugprone-unused-*,
  bugprone-switch-missing-default-case, bugprone-tagged-union-member-count, bugprone-terminating-continue, 
  bugprone-throw-keyword-missing, bugprone-too-small-loop-variable, bugprone-undefined-memory-manipulation, 
  bugprone-unchecked-optional-access, bugprone-undelegated-constructor, bugprone-unhandled-exception-at-new, 
  bugprone-unhandled-self-assignment, bugprone-unique-ptr-array-mismatch, bugprone-unsafe-functions, 
  bugprone-use-after-move, bugprone-virtual-near-miss, 
  cppcoreguidelines-avoid-*, cppcoreguidelines-init-variables, cppcoreguidelines-interfaces-global-init, 
  cppcoreguidelines-macro-usage, cppcoreguidelines-misleading-capture-default-by-value,
  cppcoreguidelines-missing-std-forward, cppcoreguidelines-no-malloc, cppcoreguidelines-no-suspend-with-lock, 
  cppcoreguidelines-owning-memory, cppcoreguidelines-prefer-member-initializer, cppcoreguidelines-pro-*,
  cppcoreguidelines-rvalue-reference-param-not-moved, cppcoreguidelines-slicing, cppcoreguidelines-special-member-functions,
  cppcoreguidelines-virtual-class-destructor,
  fuchsia-default-arguments-calls, fuchsia-default-arguments-declarations, fuchsia-multiple-inheritance, 
  fuchsia-overloaded-operator, fuchsia-statically-constructed-objects, fuchsia-trailing-return, 
  fuchsia-virtual-inheritance,
  misc-confusable-identifiers, misc-const-correctness, misc-coroutine-hostile-raii, misc-definitions-in-headers,
  misc-misleading-*, misc-new-delete-overloads, misc-non-copyable-objects, misc-non-private-member-variables-in-classes,
  misc-redundant-expression, misc-static-assert, misc-throw-by-value-catch-by-reference, misc-unconventional-assign-operator,
  misc-uniqueptr-reset-release, misc-unused-*, misc-use-internal-linkage,
  modernize-avoid-bind, modernize-avoid-c-arrays, modernize-concat-nested-namespaces, modernize-deprecated-headers,
  modernize-deprecated-ios-base-aliases, modernize-loop-convert, modernize-macro-to-enum, modernize-make-shared, 
  modernize-make-unique, modernize-min-max-use-initializer-list, modernize-pass-by-value, modernize-raw-string-literal,
  modernize-redundant-void-arg, modernize-replace-auto-ptr, modernize-replace-disallow-copy-and-assign-macro, 
  modernize-replace-random-shuffle, modernize-return-braced-init-list, modernize-shrink-to-fit, modernize-type-traits,
  modernize-unary-static-assert, modernize-use-auto, modernize-use-bool-literals, modernize-use-constraints, 
  modernize-use-default-member-init, modernize-use-designated-initializers, modernize-use-emplace, modernize-use-equals-default,
  modernize-use-equals-delete, modernize-use-integer-sign-comparison, modernize-use-nodiscard, modernize-use-noexcept,
  modernize-use-nullptr, modernize-use-override, modernize-use-ranges, modernize-use-starts-ends-with, modernize-use-std-format,
  modernize-use-std-numbers, modernize-use-std-print, modernize-use-trailing-return-type, modernize-use-transparent-functors,
  modernize-use-uncaught-exceptions, modernize-use-using
#cppcoreguidelines-no-malloc,
#  cppcoreguidelines-avoid-goto, cppcoreguidelines-avoid-do-while, cppcoreguidelines-avoid-non-const-global-variables,
#  cppcoreguidelines-avoid-const-or-ref-data-members, cppcoreguidelines-virtual-class-destructor, readability-identifier-length, readability-identifier-naming

CheckOptions:
  # https://clang.llvm.org/extra/clang-tidy/checks/bugprone/argument-comment.html
  - key: bugprone-argument-comment.StrictMode
    value: true
  # https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-const-cast.html
  - key: cppcoreguidelines-pro-type-const-cast.StrictMode
    value: true
  # https://clang.llvm.org/extra/clang-tidy/checks/modernize/avoid-c-arrays.html
  - key: modernize-avoid-c-arrays.AllowStringArrays
    value: true
  # https://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-length.html
  - key: readability-identifier-length.MinimumVariableNameLength
    value: 3
  - key: readability-identifier-length.MinimumParameterNameLength
    value: 3
  - key: readability-identifier-length.MinimumLoopCounterNameLength
    value: 3
  - key: readability-identifier-length.MinimumExceptionNameLength
    value: 3
  # https://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-naming.html
  - key: readability-identifier-naming.AbstractClassCase
    value: CamelCase
  - key: readability-identifier-naming.CheckAnonFieldInParent
    value: true
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.ClassConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.ClassMemberCase
    value: camelBack
  - key: readability-identifier-naming.ClassMethodCase
    value: camelBack
  - key: readability-identifier-naming.ConceptCase
    value: CamelCase
  - key: readability-identifier-naming.ConstantCase
    value: camelBack
  - key: readability-identifier-naming.ConstantMemberCase
    value: camelBack
  - key: readability-identifier-naming.ConstantParameterCase
    value: camelBack
  - key: readability-identifier-naming.ConstantPointerParameterCase
    value: camelBack
  - key: readability-identifier-naming.ConstexprFunctionCase
    value: camelBack
  - key: readability-identifier-naming.ConstexprMethodCase
    value: camelBack
  - key: readability-identifier-naming.ConstexprVariableCase
    value: camelBack
  - key: readability-identifier-naming.EnumCase
    value: CamelCase
  - key: readability-identifier-naming.EnumConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.FunctionCase
    value: camelBack
  - key: readability-identifier-naming.GlobalConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.GlobalConstantPointerCase
    value: UPPER_CASE
  - key: readability-identifier-naming.GlobalFunctionCase
    value: UPPER_CASE
  - key: readability-identifier-naming.GlobalPointerCase
    value: UPPER_CASE
  - key: readability-identifier-naming.GlobalVariableCase
    value: UPPER_CASE
  - key: readability-identifier-naming.InlineNamespaceCase
    value: lower_case
  - key: readability-identifier-naming.LocalConstantCase
    value: camelBack
  - key: readability-identifier-naming.LocalConstantPointerCase
    value: camelBack
  - key: readability-identifier-naming.LocalPointerCase
    value: camelBack
  - key: readability-identifier-naming.LocalVariableCase
    value: camelBack
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE
  - key: readability-identifier-naming.MemberCase
    value: camelBack
  - key: readability-identifier-naming.MethodCase
    value: camelBack
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  - key: readability-identifier-naming.ParameterCase
    value: camelBack
  - key: readability-identifier-naming.ParameterPackCase
    value: camelBack
  - key: readability-identifier-naming.PointerParameterCase
    value: camelBack
  - key: readability-identifier-naming.PrivateMemberCase
    value: camelBack
  - key: readability-identifier-naming.PrivateMethodCase
    value: camelBack
  - key: readability-identifier-naming.ProtectedMemberCase
    value: camelBack
  - key: readability-identifier-naming.ProtectedMethodCase
    value: camelBack
  - key: readability-identifier-naming.PublicMemberCase
    value: camelBack
  - key: readability-identifier-naming.PublicMethodCase
    value: camelBack
  - key: readability-identifier-naming.ScopedEnumConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.StaticConstantCase
    value: camelBack
  - key: readability-identifier-naming.StaticVariableCase
    value: camelBack
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateParameterCase
    value: camelBack
  - key: readability-identifier-naming.TemplateTemplateParameterCase
    value: camelBack
  - key: readability-identifier-naming.TypeAliasCase
    value: lower_case
  - key: readability-identifier-naming.TypedefCase
    value: lower_case
  - key: readability-identifier-naming.TypeTemplateParameterCase
    value: camelBack
  - key: readability-identifier-naming.UnionCase
    value: CamelCase
  - key: readability-identifier-naming.ValueTemplateParameterCase
    value: camelBack
  - key: readability-identifier-naming.VariableCase
    value: camelBack
  - key: readability-identifier-naming.VirtualMethodCase
    value: camelBack